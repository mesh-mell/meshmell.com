// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Action {
  id        Int      @id @default(autoincrement())
  slug      String   @unique
  nameEn    String   @map("name_en")
  nameJa    String   @map("name_ja")
  icon      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  ModelAction ModelAction[]
}

model Category {
  id           Int           @id @default(autoincrement())
  slug         String        @unique
  nameEn       String
  nameJa       String
  icon         String
  color        String
  threeDModels ThreeDModel[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
}

model ThreeDModel {
  id               Int      @id @default(autoincrement())
  slug             String   @unique
  resolutions      String[]
  formats          String[]
  usedFormat       String   @map("used_format")
  scale            Float
  rotationDegreesX Int      @map("rotation_degrees_x")
  rotationDegreesY Int      @map("rotation_degrees_y")
  rotationDegreesZ Int      @map("rotation_degrees_z")
  nameEn           String   @map("name_en")
  nameJa           String   @map("name_ja")
  descriptionEn    String   @map("description_en")
  descriptionJa    String   @map("description_ja")
  userId           String   @map("user_id")
  categoryId       Int      @map("category_id")
  category         Category @relation(fields: [categoryId], references: [id])
  categoryTags     String[] @map("category_tags")
  price            Float
  license          String
  credit           String?
  isDownloadable   Boolean  @map("is_downloadable")
  publishedAt      DateTime @map("published_at")
  createdAt        DateTime @map("created_at")
  updatedAt        DateTime @map("updated_at")

  ModelAction   ModelAction[]
  ModelDownload ModelDownload[]
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ModelDownload {
  id            Int         @id @default(autoincrement())
  threeDModelId Int         @map("threed_model_id")
  downloadId    String      @unique @map("download_id")
  downloadAt    DateTime    @map("download_at")
  threeDModels  ThreeDModel @relation(fields: [threeDModelId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())
}

model ModelAction {
  id            Int         @id @default(autoincrement())
  threeDModelId Int         @map("threed_model_id")
  actionId      Int         @map("action_id")
  threeDModel   ThreeDModel @relation(fields: [threeDModelId], references: [id])
  action        Action      @relation(fields: [actionId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())
}

model User {
  id              String        @id @default(cuid())
  email           String?       @unique
  emailVerifiedAt DateTime?     @map("email_verified_at")
  password        String?
  slug            String        @unique
  nameEn          String        @map("name_en")
  nameJa          String        @map("name_ja")
  descriptionEn   String        @map("description_en")
  descriptionJa   String        @map("description_ja")
  twitterUrl      String?       @map("twitter_url")
  websiteUrl      String?       @map("website_url")
  youtubeUrl      String?       @map("youtube_url")
  roles           String[]
  threeDModels    ThreeDModel[]
  accounts        Account[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now())
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refreshToken      String?  @map("refresh_token") @db.Text
  accssToken        String?  @map("access_token") @db.Text
  expiredAt         Int?     @map("expired_at")
  tokenType         String?  @map("token_type")
  scope             String?
  idToken           String?  @map("id_token") @db.Text
  sessionState      String?  @map("session_state") @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
